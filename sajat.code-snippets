 {
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"ureslista": {
		"prefix": "ureslista",
		"body": ["listaneve: list [valtozo(pl.: int vagy név pl.: eredmény)] = []"],
		"description": "Code snippet for an elif"
	},

	"randomclass": {
		"prefix": "randomclass_sajat",
		"body": ["class osztalyneve(object):",
					"	nev: str",
					"	szam: int",
					"	kategoria: str",
					"	ido: str",
					" ",
				
				"	def __init__(self, sor: str) -> None:",
					"		név, szám, kategória, idő = sor.split(';')",
					"		self.név = név",
					"		self.szam = szám",
					"		self.kategoria = kategória",
					"		self.idő = idő",	
					],
		"description": "Random class létrehozása, elválasztva pontos vesszővel"
		},

	"olvasas":{
		"prefix": "olvasas_sajat",
		"body": ["listaneve: list[str] = []",
					"with open('fájlnév.txt', 'r', encoding='utf-8') as file:",
						"  for sor in file.read().splitlines()[1:]:  # [1:] - első sor kihagyása",
							"    listaneve.append(osztaly(pl:épület)(sor))"],
		"description":"Egy utf-8 as fájl beolvasása és annak listában tárolása"
	}
}

